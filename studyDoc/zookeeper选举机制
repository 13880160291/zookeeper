选举机制:

SID：服务器ID，和myId一致；用来标识一台zk集群中的机器，每台机器不能重复。
ZXID：事务ID。用来标识一次服务器状态的变更。在某一时刻，集群中的每台机器的ZXID值不一定完全一致，
这和zk集群对于客户端“变更新请求”的处理逻辑有关。
Epoch：每个Leader任期的代号。没有Leader时，同一轮投票过程的逻辑时钟值是相同的。每投完一次票此值会增加。


一.第一次启动（总节点数 5个）：
1.  服务器1第一次启动，发起第一次选举，服务器1投自己一票，此时服务器1票数一票，
不够半数以上，选举无法完成，服务器1状态保持为LOOKING；
2.  服务器2启动，再发起一次选举，服务器1和服务器2分别投自己一票并交换选票信息，
此时服务器1发现服务器2的myId比自己目前投票推举的（服务器1）大，更改选票为:推举服务器2.
此时服务器1的票数0票，服务器2的票数2票，没有半数以上结果，选举无法完成，服务器1和2状态保持LOOKING。
3.  服务器3启动，发起一次选举，此时服务器1和2都会更改选票为服务器3，此次投票结果：服务器3超过半数，
服务器3当选LEADER。服务器1和2状态为FOLLOWING，服务器3更改状态为LEADING。
4.  服务器4启动，发起第一次选举，此时服务器1，2，已经不是LOOKING状态，不会更改选票信息结果，
服务器4 只有1票，少数服从多数，更改选票信息为服务器3，并更改装态为FOLLOWING。。。。

二.非第一次启动：
1.zookeeper重新选举leader的情况：
    （1）服务器初始化启动；
    （2）服务器运行期间无法和leader保持连接；
2.当一台机器进入leader选举流程时，当前集群可能会处于两种状态：
    （1）集群中已经存在一个leader；
    对于这种情况，机器试图去选举leader时，会被告知当前服务器的leader信息，对于该机器，仅仅需要和leader机器建立连接，并进行状态同步即可；
    （2）集群中确实不存在leader：
    选举：①Epoch大的直接胜出；②Epoch相同，ZXID大的胜出；③ZXID相同，SID大的胜出；

